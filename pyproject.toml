[tool.poetry]
name = "{{cookiecutter.__package_name}}"
version = "0.0.0"
description = "{{cookiecutter.description}}"
authors = ["{{cookiecutter.authors}}"]
license = "{{cookiecutter.license}}"
readme = "README.md"
packages = [{include = "{{cookiecutter.__package_name}}", from = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
dvc = {extras = ["all"], version = "^2.30.0"}

[tool.poetry.group.dev.dependencies]
toml = "^0.10.2"
pydocstyle = "^6.1.1"
isort = "^5.10.1"
black = "^22.10.0"
pylint = "^2.15.4"
mypy = "^0.982"
bandit = "^1.7.4"
coverage = "^6.5.0"
pytest = "^7.1.3"
pre-commit = "^2.20.0"
ipykernel = "^6.16.1"
jupyterlab = "^3.4.8"
ipywidgets = "^8.0.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pydocstyle]
ignore = ["D203", "D212"]

[tool.isort]
profile = "black"
line_length = 120
skip_gitignore = true

[tool.black]
line-length = 120

[tool.pylint]
disable = ["missing-module-docstring"]

[tool.pylint.format]
max-line-length = 120

[tool.mypy]
check_untyped_defs = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
show_error_codes = true
warn_return_any = true
warn_unused_ignores = true
warn_unused_configs = true
ignore_missing_imports = true

[tool.bandit]
skips = []

[tool.coverage.run]
branch = true
source = ["src/{{cookiecutter.__package_name}}"]

[tool.coverage.report]
ignore_errors = false
show_missing = true
fail_under = 100
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "AbstractMethodError",
    "@(abc\\.)?abstractmethod",
    ]

[tool.coverage.html]
directory = "coverage_html_report"

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib"]
